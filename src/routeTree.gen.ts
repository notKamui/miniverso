/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthedRouteRouteImport } from './routes/_authed/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthPathnameRouteImport } from './routes/auth/$pathname'
import { Route as AccountPathnameRouteImport } from './routes/account/$pathname'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'
import { Route as AuthedTimeChar123DayChar125RouteImport } from './routes/_authed/time/{-$day}'
import { Route as AuthedTimeStatsRouteImport } from './routes/_authed/time/stats'

const AuthedRouteRoute = AuthedRouteRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthPathnameRoute = AuthPathnameRouteImport.update({
  id: '/auth/$pathname',
  path: '/auth/$pathname',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountPathnameRoute = AccountPathnameRouteImport.update({
  id: '/account/$pathname',
  path: '/account/$pathname',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedTimeChar123DayChar125Route =
  AuthedTimeChar123DayChar125RouteImport.update({
    id: '/time/{-$day}',
    path: '/time/{-$day}',
    getParentRoute: () => AuthedRouteRoute,
  } as any)
const AuthedTimeStatsRoute = AuthedTimeStatsRouteImport.update({
  id: '/time/stats',
  path: '/time/stats',
  getParentRoute: () => AuthedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account/$pathname': typeof AccountPathnameRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/time/stats': typeof AuthedTimeStatsRoute
  '/time/{-$day}': typeof AuthedTimeChar123DayChar125Route
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account/$pathname': typeof AccountPathnameRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/time/stats': typeof AuthedTimeStatsRoute
  '/time/{-$day}': typeof AuthedTimeChar123DayChar125Route
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteRouteWithChildren
  '/account/$pathname': typeof AccountPathnameRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/_authed/time/stats': typeof AuthedTimeStatsRoute
  '/_authed/time/{-$day}': typeof AuthedTimeChar123DayChar125Route
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account/$pathname'
    | '/auth/$pathname'
    | '/time/stats'
    | '/time/{-$day}'
    | '/api/auth/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account/$pathname'
    | '/auth/$pathname'
    | '/time/stats'
    | '/time/{-$day}'
    | '/api/auth/$'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/account/$pathname'
    | '/auth/$pathname'
    | '/_authed/time/stats'
    | '/_authed/time/{-$day}'
    | '/api/auth/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
  AccountPathnameRoute: typeof AccountPathnameRoute
  AuthPathnameRoute: typeof AuthPathnameRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/$pathname': {
      id: '/auth/$pathname'
      path: '/auth/$pathname'
      fullPath: '/auth/$pathname'
      preLoaderRoute: typeof AuthPathnameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account/$pathname': {
      id: '/account/$pathname'
      path: '/account/$pathname'
      fullPath: '/account/$pathname'
      preLoaderRoute: typeof AccountPathnameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/time/{-$day}': {
      id: '/_authed/time/{-$day}'
      path: '/time/{-$day}'
      fullPath: '/time/{-$day}'
      preLoaderRoute: typeof AuthedTimeChar123DayChar125RouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/time/stats': {
      id: '/_authed/time/stats'
      path: '/time/stats'
      fullPath: '/time/stats'
      preLoaderRoute: typeof AuthedTimeStatsRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
  }
}

interface AuthedRouteRouteChildren {
  AuthedTimeStatsRoute: typeof AuthedTimeStatsRoute
  AuthedTimeChar123DayChar125Route: typeof AuthedTimeChar123DayChar125Route
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
  AuthedTimeStatsRoute: AuthedTimeStatsRoute,
  AuthedTimeChar123DayChar125Route: AuthedTimeChar123DayChar125Route,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(
  AuthedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRouteRoute: AuthedRouteRouteWithChildren,
  AccountPathnameRoute: AccountPathnameRoute,
  AuthPathnameRoute: AuthPathnameRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.tsx'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
