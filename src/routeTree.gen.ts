/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthPathnameRouteImport } from './routes/auth/$pathname'
import { Route as AuthedTimeIndexRouteImport } from './routes/_authed/time/index'
import { Route as AuthedTimeStatsRouteImport } from './routes/_authed/time/stats'
import { Route as AuthedTimeDayRouteImport } from './routes/_authed/time/$day'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthPathnameRoute = AuthPathnameRouteImport.update({
  id: '/auth/$pathname',
  path: '/auth/$pathname',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedTimeIndexRoute = AuthedTimeIndexRouteImport.update({
  id: '/time/',
  path: '/time/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedTimeStatsRoute = AuthedTimeStatsRouteImport.update({
  id: '/time/stats',
  path: '/time/stats',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedTimeDayRoute = AuthedTimeDayRouteImport.update({
  id: '/time/$day',
  path: '/time/$day',
  getParentRoute: () => AuthedRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/time/$day': typeof AuthedTimeDayRoute
  '/time/stats': typeof AuthedTimeStatsRoute
  '/time': typeof AuthedTimeIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/time/$day': typeof AuthedTimeDayRoute
  '/time/stats': typeof AuthedTimeStatsRoute
  '/time': typeof AuthedTimeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/_authed/time/$day': typeof AuthedTimeDayRoute
  '/_authed/time/stats': typeof AuthedTimeStatsRoute
  '/_authed/time/': typeof AuthedTimeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth/$pathname' | '/time/$day' | '/time/stats' | '/time'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth/$pathname' | '/time/$day' | '/time/stats' | '/time'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/auth/$pathname'
    | '/_authed/time/$day'
    | '/_authed/time/stats'
    | '/_authed/time/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  AuthPathnameRoute: typeof AuthPathnameRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/$pathname': {
      id: '/auth/$pathname'
      path: '/auth/$pathname'
      fullPath: '/auth/$pathname'
      preLoaderRoute: typeof AuthPathnameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/time/': {
      id: '/_authed/time/'
      path: '/time'
      fullPath: '/time'
      preLoaderRoute: typeof AuthedTimeIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/time/stats': {
      id: '/_authed/time/stats'
      path: '/time/stats'
      fullPath: '/time/stats'
      preLoaderRoute: typeof AuthedTimeStatsRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/time/$day': {
      id: '/_authed/time/$day'
      path: '/time/$day'
      fullPath: '/time/$day'
      preLoaderRoute: typeof AuthedTimeDayRouteImport
      parentRoute: typeof AuthedRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthedRouteChildren {
  AuthedTimeDayRoute: typeof AuthedTimeDayRoute
  AuthedTimeStatsRoute: typeof AuthedTimeStatsRoute
  AuthedTimeIndexRoute: typeof AuthedTimeIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedTimeDayRoute: AuthedTimeDayRoute,
  AuthedTimeStatsRoute: AuthedTimeStatsRoute,
  AuthedTimeIndexRoute: AuthedTimeIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  AuthPathnameRoute: AuthPathnameRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
