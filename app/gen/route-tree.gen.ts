/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../routes/__root'
import { Route as SignUpImport } from './../routes/sign-up'
import { Route as LoginImport } from './../routes/login'
import { Route as AuthedImport } from './../routes/_authed'
import { Route as IndexImport } from './../routes/index'
import { Route as AuthedTimeImport } from './../routes/_authed/time'
import { Route as AuthedLogoutImport } from './../routes/_authed/logout'
import { Route as AuthedTimeDayImport } from './../routes/_authed/time_.$day'

// Create/Update Routes

const SignUpRoute = SignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedTimeRoute = AuthedTimeImport.update({
  id: '/time',
  path: '/time',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedLogoutRoute = AuthedLogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTimeDayRoute = AuthedTimeDayImport.update({
  id: '/time_/$day',
  path: '/time/$day',
  getParentRoute: () => AuthedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpImport
      parentRoute: typeof rootRoute
    }
    '/_authed/logout': {
      id: '/_authed/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof AuthedLogoutImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/time': {
      id: '/_authed/time'
      path: '/time'
      fullPath: '/time'
      preLoaderRoute: typeof AuthedTimeImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/time_/$day': {
      id: '/_authed/time_/$day'
      path: '/time/$day'
      fullPath: '/time/$day'
      preLoaderRoute: typeof AuthedTimeDayImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedLogoutRoute: typeof AuthedLogoutRoute
  AuthedTimeRoute: typeof AuthedTimeRoute
  AuthedTimeDayRoute: typeof AuthedTimeDayRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedLogoutRoute: AuthedLogoutRoute,
  AuthedTimeRoute: AuthedTimeRoute,
  AuthedTimeDayRoute: AuthedTimeDayRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/sign-up': typeof SignUpRoute
  '/logout': typeof AuthedLogoutRoute
  '/time': typeof AuthedTimeRoute
  '/time/$day': typeof AuthedTimeDayRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/sign-up': typeof SignUpRoute
  '/logout': typeof AuthedLogoutRoute
  '/time': typeof AuthedTimeRoute
  '/time/$day': typeof AuthedTimeDayRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/sign-up': typeof SignUpRoute
  '/_authed/logout': typeof AuthedLogoutRoute
  '/_authed/time': typeof AuthedTimeRoute
  '/_authed/time_/$day': typeof AuthedTimeDayRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/sign-up'
    | '/logout'
    | '/time'
    | '/time/$day'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/sign-up' | '/logout' | '/time' | '/time/$day'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/login'
    | '/sign-up'
    | '/_authed/logout'
    | '/_authed/time'
    | '/_authed/time_/$day'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignUpRoute: typeof SignUpRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  SignUpRoute: SignUpRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/login",
        "/sign-up"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/logout",
        "/_authed/time",
        "/_authed/time_/$day"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/sign-up": {
      "filePath": "sign-up.tsx"
    },
    "/_authed/logout": {
      "filePath": "_authed/logout.tsx",
      "parent": "/_authed"
    },
    "/_authed/time": {
      "filePath": "_authed/time.tsx",
      "parent": "/_authed"
    },
    "/_authed/time_/$day": {
      "filePath": "_authed/time_.$day.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
